class CardList {
  constructor(card,cards, cardsContainer) { 
    this.container = cardsContainer;
    this.cards = cards; 
    this.newCard = card;
  }

  addCard(formCard) {
    // Правильно что используете  event.preventDefault();
    event.preventDefault();
    // Надо исправить: инициализируя и объявляя класс внутри другого класса вы создаёте жесткую связь между классами
    // Если проект будет достаточно большим и сложным, то замена одного класса  прописанного внутри другого класса может быть очень болезненной,
    // Лучше передавайте класс в качестве параметра при объявлении.
    // Как пример:
    // Допустим у нас есть класс A, просто объявляем его
    // const classA = new A();
    // Есть второй класс B при объявлении которого вы передаёте класс А
    // const classB = new B(classA);
    // В классе B вы используете методы класса А 

    //RA404: исправил   
    this.container.appendChild(this.newCard.create(formCard.elements.name.value, formCard.elements.link.value)); 

    formCard.reset();
    /** Надо исправить: вы обращаетесь в классе к переменной popup объявленной глобально,
    так делать нельзя. Вы можете передать эту переменную в качестве параметров, а потом уже обращаться к ней 
    Стремитесь к тому чтобы класс у вас был самодостаточным, и не зависел от глобальных переменных или классов 
    объявленных глобально, а только от тех данных которые были переданны через параметры 
    */
    //RA404: Исправил (вообще удалил, т.к. функционал закрытия попапа относится к классу попапа)
  }

  renderCards(container, cards, newCard) {

      cards.forEach(function (item) {
      /** Надо исправить: вы обращаетесь в классе к функции объявленной глобально (createAndAddCard),
      так делать нельзя. Объявите класс и передайте переменную при объявлении функции. Далее используйте методы класса
      const card = new Card();
      new CardList(card);
      */
      //RA404: исправил
      container.appendChild(newCard.create(item.name, item.link)); 

    });

  }
}